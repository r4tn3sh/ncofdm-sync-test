
#include "stdio.h"
#include "stdlib.h"
#include "time.h"
#include <iostream>
#include <fstream>
#include <thread>
#include <chrono>
#include "ul_tx.h"

#define DATALEN 2000
#define PKTLEN 1600

bool get_data();

using namespace win;

double freq = 2e9;
double samp_rate = 10e6;
double tx_gain = 30;
//double rx_gain = 30;
double amp = 2.0;
std::string device_addr = "addr=192.168.10.2";

std::vector<std::complex<double> > data(DATALEN);
unsigned int fileindex;

int main(int argc, char * argv[]){

    if (argc<2)
    {
        std::cout << "Not enough arguments." << std::endl;
        return(-1);
    }
    else
    {
        fileindex = strtol(argv[1], NULL, 10);
    }

	std::cout << "Start transmit chain..." << std::endl;
    srand(time(NULL)); //Initialize random seed

    if(!get_data())
    {
        std::cout << "Closing the application..." << std::endl;
        return(0);
    }
    ul_tx tx = ul_tx();


    std::vector<std::complex<double> > samples(PKTLEN);
    for (int i = 0; i<PKTLEN; i++)
    {
        samples[i] = amp*data[i];
    }

    tx.set_samp_rate(samp_rate);
    tx.set_tx_gain(tx_gain);
    tx.init_usrp();
    tx.use_external_clock();
    tx.reset_usrp_time();

    int tx_count = 0;
    double tx_time = 0.0;
    std::this_thread::sleep_for(std::chrono::milliseconds(1000));
    double curr_time = tx.get_usrp_time().get_real_secs();
    double samp_duration = 1/samp_rate;
    double rep_time = samp_duration*(PKTLEN+160);
    tx_time = curr_time + 0.5;
    while(1)
    {
        tx_time += rep_time;
        tx.set_txmetadata(true, true, true, uhd::time_spec_t(tx_time));
        tx.send_data(samples);
        // std::cout << tx.get_usrp_time().get_real_secs() << std::endl; 
        // tx.set_txmetadata(false, true, false, uhd::time_spec_t(tx_time));
        // tx.send_data(samples);
    }
}


/*!
 * \Read the PN sequence from the file generated by MATLAB
 */
bool get_data()
{
    std::ifstream datafile;
    float tempdata[2*DATALEN] = {0.0};
    if(fileindex == 0)
        datafile.open("../int_data1.dat", std::ios::in | std::ios::binary);
    else
        datafile.open("../int_data2.dat", std::ios::in | std::ios::binary);

    if(!datafile) 
    {
        std::cout << "Cannot open file.\n";
        return false;
    }
    datafile.read((char*)&tempdata, 8*DATALEN);

    for(int i=0; i<DATALEN; i++)
    {
        data[i].real(tempdata[2*i]);
        data[i].imag(0-tempdata[2*i+1]);
    }
    for(int i=DATALEN-900; i<DATALEN; i++)
        std::cout << i << " : " << tempdata[i] << std::endl;
    std::cout << std::endl;
}
